version: "3.9"

x-default-opts: &default-opts
  env_file:
    .env
  logging:
    options:
      max-size: "1m"
    # driver: "gelf"
    # options:
    #   gelf-address: "udp://172.17.0.1:12201"

services:
  gitlab:
    <<: *default-opts
    image: gitlab/gitlab-ce:${GITLAB_TAG}
    networks:
      - gitlab_network
      - proxy_network
      - metrics_network
    volumes:
      - gitlab_data:/var/opt/gitlab
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_backups:/var/opt/backups
    environment:
      GITLAB_OMNIBUS_CONFIG: "from_file('/etc/gitlab/gitlab.rb')"
    configs:
      - source: gitlab
        target: /etc/gitlab/gitlab.rb
    secrets:
      - gitlab_root_password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.routers.gitlab.entrypoints: ${ENTRYPOINT:-websecure}
        traefik.http.routers.gitlab.rule: Host(`${DOMAIN:-gitlab.localhost}`)
        traefik.http.routers.gitlab.service: gitlab
        traefik.http.services.gitlab.loadbalancer.server.port: 80

  gitlab-backup:
    <<: *default-opts
    image: docker:latest
    command: 
      - sh
      - -c
      - | 
        echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- Backup service started on $$NODE_HOSTNAME. Waiting for $$BACKUP_FREQUENCY until first backup.";
        sleep 10m; # wait for gitlab to start
        containerId=`docker ps -qf "name=gitlab_gitlab.1"`
        while [ ! -z "$$containerId" ]; do
          echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- Found GitLab instance running on $$NODE_HOSTNAME with the container id: $$containerId"
          echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- Creating complete backup of GitLab...";
          docker exec -t $$containerId gitlab-backup create
          code=`echo $$?`
          if [ $$code -eq 0 ]; then
            docker exec -t $$containerId bash -c 'cd /var/opt/backups/; ls -t | head -1 | xargs -I {} tar -rf "{}" /etc/gitlab/gitlab-secrets.json /etc/gitlab/gitlab.rb'
            echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- Backup completed! Next backup in $$BACKUP_FREQUENCY";
          else
            echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- Backup failed! Next backup in $$BACKUP_FREQUENCY";
          fi
          sleep $$BACKUP_FREQUENCY;
          containerId=`docker ps -qf "name=gitlab_gitlab.1"`
        done
        echo "$$(date +'%Y-%m-%d %H:%M:%S %Z') -- GitLab instance not found on $$NODE_HOSTNAME. Skipping GitLab backup service."
        exit 255
    environment:
      NODE_HOSTNAME: '{{.Node.Hostname}}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    stop_grace_period: 1s
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: ${BACKUP_FREQUENCY}

configs:
  gitlab:
    file: ./.rb
    name: gitlab-rb-1

secrets:
  gitlab_root_password:
    external: true
      
networks:
  gitlab_network:
    driver: overlay
    attachable: true

  proxy_network:
    external: true

  metrics_network:
    external: true

volumes:
  gitlab_data:
    driver: local
    driver_opts:
      device: ${HOST_GITLAB_DATA}
      type: none
      o: bind
      # device: ":${HOST_GITLAB_DATA?Variable not set}"
      # type: nfs
      # o: addr=${NFS_SHARE_IP?Variable not set},rw,sync,nfsvers=4.1

  gitlab_config:
    driver: local
    driver_opts:
      device: ${HOST_GITLAB_CONFIG}
      type: none
      o: bind
      # device: ":${HOST_GITLAB_CONFIG?Variable not set}"
      # type: nfs
      # o: addr=${NFS_SHARE_IP?Variable not set},rw,sync,nfsvers=4.1

  gitlab_logs:
    driver: local
    driver_opts:
      device: ${HOST_GITLAB_LOGS}
      type: none
      o: bind
      # device: ":${HOST_GITLAB_LOGS?Variable not set}"
      # type: nfs
      # o: addr=${NFS_SHARE_IP?Variable not set},rw,sync,nfsvers=4.1

  gitlab_backups:
    driver: local
    driver_opts:
      device: ${HOST_GITLAB_BACKUPS}
      type: none
      o: bind
      # device: ":${HOST_GITLAB_BACKUPS?Variable not set}"
      # type: nfs
      # o: addr=${NFS_SHARE_IP?Variable not set},rw,sync,nfsvers=4.1